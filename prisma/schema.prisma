// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String           @id @default(cuid())
  email         String           @unique
  passwordHash  String
  role          Role             @default(USER)
  created_at    DateTime         @default(now())
  steamId       Int?
  deleted_at    DateTime?
  gameTimes     GameTime[]
  oauths        Oauth[]
}

enum Role {
  USER
  ADMIN
}

model Game {
  id     Int    @id @default(autoincrement())
  appid  Int    @unique
  name   String
  gameTimes GameTime[]
}

model GameTime {
  id Int @id @default(autoincrement())
  gameId Int
  game   Game  @relation(fields: [gameId], references: [id])
  updated_at DateTime @default(now())
  play_time Int?
  userId String
  user User @relation(fields: [userId], references: [id])
  @@unique([userId, gameId])
}

model Oauth {
  id            Int      @id @default(autoincrement())
  provider      String   // e.g. "google", "github", "tmdb"
  providerUserId String  // The user's ID from the OAuth provider
  accessToken   String?  // Optional: store access token if needed
  refreshToken  String?  // Optional: store refresh token if needed
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([provider, providerUserId])
  @@unique([userId, provider])
}